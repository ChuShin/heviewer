{"version":3,"sources":["components/GenomeGroup.js","components/GenomeLoad.js","App.js","reportWebVitals.js","index.js"],"names":["margin","top","right","bottom","left","width","height","chrDistance","barWidth","getGenomeSummary","d","i","chrGroup","nest","key","group","entries","offset","genomeSummary","length","chrSize","max","values","map","pos","name","getSampleSummary","sampleGroup","sample","sampleSummary","mean","covA","covB","sd","deviation","heColor","cov1","cov2","pallete","zscore1","zscore2","getSVGString","svgNode","setAttribute","svgString","XMLSerializer","serializeToString","replace","svgString2Image","callback","imgsrc","btoa","unescape","encodeURIComponent","canvas","document","createElement","context","getContext","image","Image","onload","clearRect","drawImage","toBlob","blob","filesize","Math","round","src","writeDownloadLink","filename","Blob","e","alert","type","saveAs","setGenome","ggdot","xScale","sampleData","svg_dot","select","current","selectAll","remove","sampleName","sampleValues","y","scaleLinear","domain","range","yAxis","axisLeft","scale","ticks","tickFormat","append","attr","style","call","forEach","pointsA","pointsB","chrPosX","x","data","enter","xi","yi","drawHeatmap","svg","chrPosY","heatMap","datapoints","dp","drawChrLabels","chrLabels","drawWidth","lastChrGroup","hasOwnProperty","labelPos","text","drawChrAxis","heatmapAxis","heatmapHeight","numTicks","axisYPos","chr","chrScale","axisBottom","GenomeGroup","_ref2","gglinear","useRef","_useState","useState","_useState2","Object","_Users_chk512_JSprojects_heviewer_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","dotplot","setDotPlot","_useState3","_useState4","setSelectedSample","_useState5","_useState6","ggHeight","setGgHeight","useEffect","handleSampleChange","j","sampleButtons","filter","zoomed","_ref3","transform","heatMaps","console","log","yScale","concat","heData","numSamples","_","zooms","zoom","scaleExtent","on","isZoomed","event","curTransform","zoomTransform","node","factor","leftPad","plotWidth","xPos","pointer","xPosZoomed","lowerBound","upperBound","transformation","transition","duration","eval","zoomIdentity","react__WEBPACK_IMPORTED_MODULE_1___default","a","className","id","ref","heFormat","parseFloat","GenomeLoad","slicedToArray","genome","setGenomeData","getElementById","addEventListener","evt","file","target","files","reader","FileReader","csv","result","then","readAsDataURL","react_default","accept","App","components_GenomeLoad","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.25bafba3.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\nimport { max, mean,deviation } from 'd3-array'\nimport { select } from 'd3-selection'\nimport { nest } from 'd3-collection'\nimport { scaleLinear } from 'd3-scale'\nimport { axisLeft, axisBottom } from 'd3-axis'\nimport { zoom, zoomIdentity, zoomTransform } from 'd3-zoom'\nimport { pointer } from 'd3'\n\nimport { saveAs } from 'file-saver';\nimport '../index.css'\nimport Loader from \"react-loader-spinner\";\nimport * as _ from \"lodash\";\n\nconst margin = { top: 20, right: 20, bottom: 50, left: 20 }\nconst width = 1500\nconst height = 400 - margin.top - margin.bottom\nconst chrDistance = 5000000\nconst barWidth = 20\n\nfunction getGenomeSummary(d) {\n    // group data by chr\n    let chrGroup = nest()\n      .key(function(d) { return d.group })\n      .entries(d)\n\n    let i,offset = 0\n    let genomeSummary = {}\n\n    for(i = 0; i < chrGroup.length; i++) {\n      let chrSize = max(chrGroup[i].values.map(function (d) { return d.pos} ))\n      genomeSummary[chrGroup[i].key] = {\n        name: chrGroup[i].key,\n        chrSize: chrSize,\n        offset: offset\n      }\n      offset += chrSize + chrDistance\n    }\n    genomeSummary['map_size'] = offset\n    return genomeSummary\n  }\n\nfunction getSampleSummary(d) {\n    // group data by chr\n    let sampleGroup = nest()\n      .key(function(d) { return d.sample })\n      .entries(d)\n\n    let i, offset = 0\n    let sampleSummary = {}\n\n    for(i = 0; i < sampleGroup.length; i++) {\n      sampleSummary[sampleGroup[i].key] = {\n        name: sampleGroup[i].key,\n        mean: mean(sampleGroup[i].values.map(function (d) { return (d.covA + d.covB)} )) / 2,\n        sd: deviation(sampleGroup[i].values.map(function (d) { return d.covA}))/2\n      }\n    }\n    return sampleSummary\n  }\n\n\nfunction heColor(mean,sd,cov1,cov2) {\n  const pallete = [\n  '#FF2400', '#E56717', '#FDD017',\n  '#5FFB17','#4EE2EC','#0041C2',\n  '#E3319D','#9C67CA', '#452E5A']\n\n  //const pallete = [\n  //  '#73D055FF','#B8DE29FF','#FDE725FF',\n  //  '#39568CFF',null,'#238A8DFF',\n  //  '#440154FF','#482677FF','#404788FF']\n\n  let zscore1 = (cov1 - mean) / sd\n  let zscore2 = (cov2 -mean) / sd\n  /* del/del */\n  if (zscore1<=-2 && zscore2<=-2) return pallete[0]\n  /* del/norml */\n  if (zscore1<-2 && (zscore2>-2 && zscore2<2)) return pallete[1]\n  /* del/dup */\n  if (zscore1<=-2 && zscore2>=2) return pallete[2]\n  /* norml/del */\n  if ((zscore1>-2 && zscore1<2) && zscore2<-2) return pallete[3]\n  /* norml/norml */\n  if ((zscore1>-2 && zscore1<2) && (zscore2>-2 && zscore2<2)) return pallete[4]\n  /* norml/dup */\n  if ((zscore1>-2 && zscore1<2) && zscore2>2) return pallete[5]\n  /* del/dup */\n  if (zscore1<=-2 && zscore2>=2) return pallete[6]\n  /* del/norml */\n  if (zscore1<-2 && (zscore2>-2 && zscore2<2)) return pallete[7]\n  /* dup/dup */\n  if (zscore1>2 && zscore2>2) return pallete[8]\n}\n\nfunction getSVGString( svgNode ) {\n\tsvgNode.setAttribute('xlink', 'http://www.w3.org/1999/xlink');\n\tvar serializer = new XMLSerializer();\n\tvar svgString = serializer.serializeToString(svgNode);\n\tsvgString = svgString.replace(/(\\w+)?:?xlink=/g, 'xmlns:xlink='); // Fix root xlink without namespace\n\tsvgString = svgString.replace(/NS\\d+:href/g, 'xlink:href'); // Safari NS namespace fix\n\n\treturn svgString;\n}\n\n/*test png download */\nfunction svgString2Image( svgString, width, height, callback ) {\n\tvar format = 'png';\n\n\tvar imgsrc = 'data:image/svg+xml;base64,'+ btoa( unescape( encodeURIComponent( svgString ) ) ); // Convert SVG string to data URL\n\n\tvar canvas = document.createElement(\"canvas\");\n\tvar context = canvas.getContext(\"2d\");\n\n\tcanvas.width = width;\n\tcanvas.height = height;\n\n\tvar image = new Image();\n\timage.onload = function() {\n\t\tcontext.clearRect ( 0, 0, width, height );\n\t\tcontext.drawImage(image, 0, 0, width, height);\n\n\t\tcanvas.toBlob( function(blob) {\n\t\t\tvar filesize = Math.round( blob.length/1024 ) + ' KB';\n\t\t\tif ( callback ) callback( blob, filesize );\n\t\t});\n\n\n\t};\n\n\timage.src = imgsrc;\n}\n\nfunction writeDownloadLink(svgString, filename){\n    try {\n        var isFileSaverSupported = !!new Blob();\n    } catch (e) {\n        alert(\"blob not supported\");\n    }\n    var blob = new Blob([svgString], {type: \"image/svg+xml\"});\n    saveAs(blob, filename);\n};\n\n\nfunction setGenome(ggdot,xScale,sampleSummary, genomeSummary,sampleData) {\n\n  let svg_dot = select(ggdot.current)\n  svg_dot.selectAll(\"*\").remove()\n\n  let sampleName = sampleData.key\n  let sampleValues = sampleData.values\n\n  // Add Y axis\n  let y = scaleLinear().domain([0, 70000000]).range([ 0,height])\n  let yAxis = axisLeft().scale(y).ticks(6).tickFormat(function(d,i) {  return d/1000000 })\n  svg_dot.append(\"g\")\n      .attr(\"transform\", `translate(50, 20)`)\n      .style('font', '12px helvetica')\n      .call(yAxis)\n\n  sampleValues.forEach(function(d,i){\n\n    let pointsA = d.values.map(function (d) {return [d.covA,d.pos]})\n    let pointsB = d.values.map(function (d) {return [-1*d.covB,d.pos]})\n    let mean = sampleSummary[sampleName].mean\n    let chrPosX = xScale(genomeSummary[d.key].offset)+100\n\n  //console.log(pointsB)\n    let x = scaleLinear()\n      .domain([-3*mean, 3*mean])\n      .range([ -40, 40 ])\n\n  svg_dot.append('g')\n    .attr(\"transform\", `translate(50, 20)`)\n    .selectAll(\"dot\")\n    .data(pointsA)\n    .enter().append(\"circle\")\n    .attr(\"cx\", xi => chrPosX+x(xi[0]))\n    .attr(\"cy\", yi => y(yi[1]))\n    .attr(\"r\", 1.5)\n    .style(\"fill\", '#808080')\n\n  svg_dot.append('g')\n    .attr(\"transform\", `translate(50, 20)`)\n    .selectAll(\"dot\")\n    .data(pointsB)\n    .enter().append(\"circle\")\n    .attr(\"cx\", xi => chrPosX+x(xi[0]))\n    .attr(\"cy\", yi => y(yi[1]))\n    .attr(\"r\", 1.5)\n    .style(\"fill\", '#808080')\n\n  svg_dot.append(\"line\")\n    .attr(\"transform\", `translate(50, 20)`)\n    .attr(\"x1\", chrPosX)\n    .attr(\"y1\", y(0))\n    .attr(\"x2\", chrPosX)\n    .attr(\"y2\", y(genomeSummary[d.key].chrSize))\n    .style(\"stroke\", \"black\")\n    .style(\"stroke-width\", 2)\n\n  svg_dot.append(\"line\")\n    .attr(\"transform\", `translate(50, 20)`)\n    .attr(\"x1\", chrPosX+x(mean))\n    .attr(\"y1\", y(0))\n    .attr(\"x2\", chrPosX+x(mean))\n    .attr(\"y2\", y(genomeSummary[d.key].chrSize))\n    .style(\"stroke\", \"#9933a2\")\n    .style(\"stroke-width\", 2)\n\n  svg_dot.append(\"line\")\n    .attr(\"transform\", `translate(50, 20)`)\n    .attr(\"x1\", chrPosX-x(mean))\n    .attr(\"y1\", y(0))\n    .attr(\"x2\", chrPosX-x(mean))\n    .attr(\"y2\", y(genomeSummary[d.key].chrSize))\n    .style(\"stroke\", \"#69b3a2\")\n    .style(\"stroke-width\", 2)\n  })\n}\n\nfunction drawHeatmap(svg, sampleName, sampleValues, sampleSummary, genomeSummary, xScale, chrPosY) {\n\n  let heatMap = svg.append('g').attr('transform', `translate(80,0)`)\n  function zoomed({transform}) {\n    heatMap.attr(\"transform\", transform);\n  }\n\n  sampleValues.forEach(function(d,i){\n    let datapoints = d.values.map(function (dp) {\n      return [dp.pos,heColor(sampleSummary[sampleName].mean,sampleSummary[sampleName].sd,dp.covA,dp.covB)]\n    })\n  let chrPosX = xScale(genomeSummary[d.key].offset)\n\n\n  /* draw frame */\n  heatMap\n    .append('g')\n    .append('rect')\n    .attr('rx', 2)\n    .attr('ry', 2)\n    .attr('x', chrPosX)\n    .attr('y', chrPosY)\n    .attr('width', xScale(genomeSummary[d.key].chrSize))\n    .attr('height', barWidth)\n    .style('fill', '#FF2400AF')\n    .style('fill-opacity',0.1)\n\n  /* draw data points */\n  var groups = heatMap.append('g');\n  groups\n    .selectAll('line')\n    .data(datapoints)\n    .enter()\n    .append('line')\n    .style('stroke', d => d[1])\n    .attr('chrGroup', d.key)\n    .attr('value',d => d[0])\n    .attr('x1', xi => chrPosX + xScale(xi[0]))\n    .attr('y1', yi => chrPosY )\n    .attr('x2', xi => chrPosX + xScale(xi[0]))\n    .attr('y2', yi => chrPosY + barWidth)\n  })\n}\n\nfunction drawChrLabels(chrLabels, genomeSummary, drawWidth) {\n  let xScale = scaleLinear().domain([0, genomeSummary['map_size']]).range([0, drawWidth])\n  let lastPos = 0\n  let lastChrGroup = \"\"\n  for (let chrGroup in genomeSummary) {\n    if (genomeSummary[chrGroup].hasOwnProperty('offset')) {\n      if(genomeSummary[chrGroup].offset > 0) {\n        let labelPos = (genomeSummary[lastChrGroup].offset + genomeSummary[chrGroup].offset) / 2\n        chrLabels\n          .attr('transform', `translate(80,0)`)\n          .append(\"text\")\n          .attr(\"class\", \"xLabel\")\n          .attr(\"x\",xScale(labelPos))\n          .attr(\"y\",15)\n          .attr(\"text-anchor\", \"middle\")\n          .text(lastChrGroup)\n          .style('font', '16px helvetica')\n          .style('font-weight','bold')\n          .style('fill', 'rgb(0, 65, 194)')\n        lastChrGroup = chrGroup\n      }\n      else {\n        lastChrGroup=chrGroup\n      }\n    }\n  }\n  let labelPos = genomeSummary[lastChrGroup].offset + genomeSummary[lastChrGroup].chrSize / 2\n  chrLabels\n    .attr('transform', `translate(80,0)`)\n    .append(\"text\")\n    .attr(\"class\", \"xLabel\")\n    .attr(\"x\",xScale(labelPos))\n    .attr(\"y\",15)\n    .attr(\"text-anchor\", \"middle\")\n    .text(lastChrGroup)\n    .style('font', '16px helvetica')\n    .style('font-weight','bold')\n    .style('fill', 'rgb(0, 65, 194)')\n}\n\n/* function to chr axis in heatmap */\nfunction drawChrAxis(heatmapAxis, genomeSummary, drawWidth, heatmapHeight, numTicks) {\n  let xScale = scaleLinear().domain([0, genomeSummary['map_size']]).range([0, drawWidth])\n  let axisYPos = heatmapHeight - 40\n  heatmapAxis.attr('transform', \"translate(80, \"+axisYPos+\")\")\n\n  for (let chrGroup in genomeSummary) {\n    let chr = genomeSummary[chrGroup]\n    if (chr.hasOwnProperty('offset')) {\n      if(chr.offset >= 0) {\n        let chrScale = scaleLinear()\n            .domain([0, chr.chrSize])\n            .range([xScale(chr.offset),xScale(chr.chrSize+chr.offset)])\n        let chrAxis = heatmapAxis.append('g')\n        chrAxis.call(axisBottom(chrScale).ticks(numTicks).tickFormat(function(d,i) {  return d/1000000 }))\n      }\n    }\n  }\n}\n\nconst GenomeGroup = ({data}) => {\n    const gglinear = useRef(null)\n    const ggdot = useRef(null)\n    const [dotplot, setDotPlot] = useState(null)\n    const [, setSelectedSample] = useState(null)\n    const [ggHeight, setGgHeight] = useState('400')\n\n    useEffect(() => {\n\n        if(data && gglinear.current) {\n\n            const genomeSummary = getGenomeSummary(data)\n            const sampleSummary = getSampleSummary(data)\n            console.log(genomeSummary)\n            console.log(sampleSummary)\n\n\n            function handleSampleChange(sampleData,j) {\n                let sample = sampleData.key\n                // update sample label\n                setDotPlot(sample)\n                // update plot area\n                setGenome(ggdot, xScale, sampleSummary, genomeSummary, sampleData)\n\n                var sampleButtons = svg.selectAll(\".sampleBtn\")\n                //unset old\n                sampleButtons.style(\"fill\",\"#525252\")\n                //set new selected\n                sampleButtons.filter(function (d, i) { return i === j;})\n                .style(\"fill\",\"blue\")\n            }\n\n\n            const xScale = scaleLinear().domain([0, genomeSummary['map_size']]).range([0, width-margin.right])\n            const yScale = scaleLinear().domain([0, 300]).range([0, height])\n\n\n            let svg = select(gglinear.current)\n            svg.selectAll(\"*\").remove()\n\n            // append group translated to chart area\n            svg = svg.append('g').attr('transform', `translate(${margin.left}, ${margin.top})`)\n\n            //group by sample then by chr\n            const heData = nest()\n              .key(function(d) {return d.sample})\n              .key(function(d) {return d.group})\n              .entries(data)\n\n            //set image height based on number of samples\n\n            let numSamples = _.size(heData)\n            let heatmapHeight = 22 * (numSamples + 3)\n            setGgHeight(heatmapHeight)\n\n\n            //let defaultX = xScale(genomeSummary[defaultData.key].offset)\n            /* draw chr labels */\n            let chrLabels = svg.append('g')\n            drawChrLabels(chrLabels, genomeSummary, width-margin.right)\n\n            /* draw chr axis */\n            let heatmapAxis = svg.append('g')\n            drawChrAxis(heatmapAxis, genomeSummary, width-margin.right,heatmapHeight)\n\n\n            let heatMaps = svg.append('g')\n            var zooms = zoom().scaleExtent([5, 5]).on(\"zoom\",zoomed)\n            var isZoomed = 0\n            heatMaps.on(\"dblclick\", function(event) {\n                var curTransform = zoomTransform(heatMaps.node())\n                var factor = 10\n                var leftPad = 80\n                var plotWidth = width - margin.right\n                var xPos = pointer(event)[0]\n                var xPosZoomed = factor*xPos\n                var lowerBound = -1*(factor-1)*leftPad\n                var upperBound = -1*(factor)*plotWidth+900\n                var transformation = \"\"\n                if(isZoomed == 0) {\n                if(xPos < 210 ) {   // left-boundary\n                    transformation = lowerBound\n                }\n                //else if(xPos > 1280 ) {   // right-boundary\n                else if(xPos > 1460 ) {   // right-boundary\n                    transformation = upperBound\n                }\n                else { // otherwise\n                    transformation = plotWidth / 2 - xPosZoomed\n                }\n                heatMaps.transition().duration(750).attr(\"transform\",\"translate(\"+transformation+\",0) scale(10,1)\")\n                /* remove existing label */\n                chrLabels.remove()\n                /* redraw label */\n                chrLabels = svg.append('g')\n                drawChrLabels(chrLabels, genomeSummary, factor*plotWidth)\n                chrLabels.transition().duration(750).attr(\"transform\",\"translate(\"+transformation+factor*leftPad+\",0)\")\n                /* remove existing chr axis */\n                heatmapAxis.remove()\n                /* redraw axis */\n                heatmapAxis = svg.append('g')\n                drawChrAxis(heatmapAxis, genomeSummary, factor*(width-margin.right), heatmapHeight, 20)\n                heatmapAxis.transition().duration(750).attr(\"transform\",\n                    \"translate(\"+eval(transformation+factor*leftPad)+\",\"+eval(heatmapHeight - 40)+\")\")\n                isZoomed = 1\n                }\n                else {\n                heatMaps.transition().duration(750).call(zooms.transform,zoomIdentity)\n                /* redraw label */\n                chrLabels.remove()\n                chrLabels = svg.append('g')\n                /* redraw label */\n                drawChrLabels(chrLabels, genomeSummary, plotWidth)\n                /* remove existing chr axis */\n                heatmapAxis.remove()\n                heatmapAxis = svg.append('g')\n                /* redraw axis */\n                drawChrAxis(heatmapAxis, genomeSummary, plotWidth, heatmapHeight)\n                isZoomed = 0\n                }\n            })\n            function zoomed({transform}) {\n              heatMaps.attr(\"transform\", transform);\n            }\n\n            heData.forEach(function(sampleData,j){\n              let sampleName = sampleData.key\n              let sampleValues = sampleData.values\n              let chrPosY = yScale(`${margin.top+barWidth*j}`)\n\n              // sample label\n              svg\n                .append('g')\n                .append('rect')\n                .attr(\"class\",\"sampleBtn\")\n                .attr('rx', 4)\n                .attr('ry', 4)\n                .attr('x', xScale(0))\n                .attr('y', chrPosY)\n                .attr('width', 70)\n                .attr('height', barWidth)\n\n              svg\n                .append(\"text\")\n                .attr(\"class\", \"y label\")\n                .attr(\"x\",5)\n                .attr(\"y\",chrPosY+yScale(barWidth)-8)\n                .text(sampleName)\n                .style('font', '10px helvetica')\n                .style('fill', 'white')\n                .on(\"click\", () => {\n                    handleSampleChange(sampleData,j)\n                })\n\n              /* draw heatmap for sample */\n              drawHeatmap(heatMaps, sampleName, sampleValues, sampleSummary, genomeSummary, xScale, chrPosY)\n            })\n\n            //set default sample\n            handleSampleChange(heData[0],0)\n\n            select('#saveHeatMap').on('click', function(){\n\t            var svgString = '<svg height=\"500\" width=\"1000\">'+getSVGString(svg.node())+'</svg>';\n                writeDownloadLink(svgString, 'heatmap.svg')\n\t        })\n            select('#saveScatter').on('click', function(){\n                let svg_dot = select(ggdot.current)\n\t            var svgString = '<svg height=\"500\" width=\"1000\">'+getSVGString(svg_dot.node())+'</svg>';\n                writeDownloadLink(svgString, 'scatterplot.svg')\n\t        })\n        }\n    },[data])\n\n    return (\n      <div>\n        <div className = 'actionPanel'>\n            <button className='saveBtn' id='saveHeatMap'>Export Heatmap</button>\n            <button className='saveBtn' id='saveScatter'>Export ScatterPlot</button>\n        </div>\n        <div className='ggContainer'>\n        <svg className='GGLinear'\n            width = '1600'\n            height= {ggHeight}\n            ref={gglinear}></svg>\n        </div>\n        <h3>{dotplot}</h3>\n        <div className='ggContainer'>\n        <svg className='GGDot'\n        width = {width + margin.left + margin.right}\n        height='400' ref={ggdot}></svg>\n        </div>\n      </div>\n    )\n}\n\n\nexport default GenomeGroup","import React, { useState, useEffect } from 'react'\nimport Loader from \"react-loader-spinner\";\nimport { csv } from 'd3-fetch'\n\nimport GenomeGroup from './GenomeGroup'\n//import FileLoader from './FileLoader'\n\nfunction heFormat(d) {\n  return {\n    sample: d.sample,\n    group: d.group,\n    pos: +d.pos,\n    covA: parseFloat(d.covA),\n    covB: parseFloat(d.covB)\n  }\n}\n\nconst GenomeLoad = () => {\n  const [genome, setGenomeData] = useState(null)\n\n  useEffect(() => {\n    function handleFileSelect(evt) {\n      var file = evt.target.files[0];\n      var reader = new FileReader();\n      reader.onload = (function(theFile) {\n      return function(e) {\n        csv(e.target.result,heFormat).then(data => {\n          setGenomeData(data)\n        })\n      };\n    })(file);\n    reader.readAsDataURL(file);\n}\ndocument.getElementById('file_input').addEventListener('change', handleFileSelect, false);\n\n\n  }, [])\n\n\n  //if (genome === null) {\n    // add a loader timeout in 10s\n  //  return <h3>Loading data..</h3>\n  //}\n\n  return (\n  <div>\n  <input type=\"file\" id=\"file_input\" accept=\".csv\"\n  />\n\n  <GenomeGroup data={genome} />\n  </div>\n  )\n}\n\nexport default GenomeLoad","import React  from 'react';\nimport './index.css'\nimport GenomeLoad from './components/GenomeLoad'\n\nconst App = () => {\n  return (\n    <div>\n       <div className='header'>\n         HExviewer\n       </div>\n       <div className='heContainer'>\n         <GenomeLoad />\n       </div>\n    </div>\n  )\n}\nexport default App\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}