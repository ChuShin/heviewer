{"version":3,"sources":["components/GenomeGroup.js","components/GenomeLoad.js","App.js","reportWebVitals.js","index.js"],"names":["margin","width","height","chrDistance","setSelectedChr","heColor","mean","sd","cov1","cov2","pallete","zscore1","zscore2","GenomeGroup","_ref","data","gglinear","useRef","ggdot","useEffect","current","genomeSummary","d","i","chrGroup","nest","key","group","entries","offset","length","chrSize","max","values","map","pos","name","getGenomeSummary","sampleSummary","sampleGroup","sample","covA","covB","deviation","getSampleSummary","console","log","xScale","scaleLinear","domain","range","yScale","svg","select","append","attr","concat","x_axis","axisBottom","scale","ticks","style","call","forEach","sampleData","j","sampleName","sampleValues","chrPosY","text","datapoints","dp","chrPosX","on","svg_dot","selectAll","remove","pointsA","pointsB","x","axisLeft","y","enter","xi","yi","setGenome","react_default","a","createElement","className","onClick","ref","heFormat","geneA","parseFloat","geneB","GenomeLoad","_useState","useState","_useState2","Object","slicedToArray","genome","setGenomeData","csv","then","dist_default","type","color","timeout","components_GenomeGroup","App","components_GenomeLoad","Component","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.4556d3c4.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\nimport { max, mean,deviation } from 'd3-array'\nimport { select } from 'd3-selection'\nimport { nest } from 'd3-collection'\nimport { scaleLinear } from 'd3-scale'\nimport { axisBottom, axisLeft } from 'd3-axis'\n\n\n\nconst margin = { top: 20, right: 20, bottom: 50, left: 20 }\nconst width = 1600 - margin.left - margin.right\nconst height = 400 - margin.top - margin.bottom\nconst barDistance  = 100\nconst chrDistance = 5000000\nconst barWidth = 20\nconst xPosition = 80\nconst yPosition = 150\n\n\nfunction setSelectedChr() {\n}\n\nfunction getGenomeSummary(d) {\n    // group data by chr\n    let chrGroup = nest()\n      .key(function(d) { return d.group })\n      .entries(d)\n\n    let i,offset = 0\n    let genomeSummary = {}\n\n    for(i = 0; i < chrGroup.length; i++) {\n      let chrSize = max(chrGroup[i].values.map(function (d) { return d.pos} ))\n      genomeSummary[chrGroup[i].key] = {\n        name: chrGroup[i].key,\n        chrSize: chrSize,\n        offset: offset\n      }\n      offset += chrSize + chrDistance\n    }\n    genomeSummary['map_size'] = offset\n    return genomeSummary\n  }\n\nfunction getSampleSummary(d) {\n    // group data by chr\n    let sampleGroup = nest()\n      .key(function(d) { return d.sample })\n      .entries(d)\n\n    let i, offset = 0\n    let sampleSummary = {}\n\n    for(i = 0; i < sampleGroup.length; i++) {\n      sampleSummary[sampleGroup[i].key] = {\n        name: sampleGroup[i].key,\n        mean: mean(sampleGroup[i].values.map(function (d) { return (d.covA + d.covB)} )) / 2,\n        sd: deviation(sampleGroup[i].values.map(function (d) { return d.covA}))/2\n      }\n    }\n    return sampleSummary\n  }\n\n\nfunction heColor(mean,sd,cov1,cov2) {\n  const pallete = [\n  '#FF24009F', '#E567179F', '#FDD0179F',\n  '#5FFB179F','#4EE2EC9F', '#0041C29F', '#E3319D9F']\n  //const pallete = [\n  //  '#73D055FF','#B8DE29FF','#FDE725FF',\n  //  '#39568CFF',null,'#238A8DFF',\n  //  '#440154FF','#482677FF','#404788FF']\n\n  let zscore1 = (cov1 - mean) / sd\n  let zscore2 = (cov2 -mean) / sd\n  /* del/del */\n  if (zscore1<=-2 && zscore2<=-2) return pallete[0]\n  /* del/norml */\n  if (zscore1<-2 && (zscore2>-2 && zscore2<2)) return pallete[1]\n  /* del/dup */\n  if (zscore1<=-2 && zscore2>=2) return pallete[2]\n  /* norml/del */\n  if ((zscore1>-2 && zscore1<2) && zscore2<-2) return pallete[3]\n  /* norml/norml */\n  if ((zscore1>-2 && zscore1<2) && (zscore2>-2 && zscore2<2)) return pallete[4]\n  /* norml/dup */\n  if ((zscore1>-2 && zscore1<2) && zscore2>2) return pallete[5]\n  /* del/dup */\n  if (zscore1<=-2 && zscore2>=2) return pallete[6]\n  /* del/norml */\n  if (zscore1<-2 && (zscore2>-2 && zscore2<2)) return pallete[7]\n  /* dup/dup */\n  if (zscore1>2 && zscore2>2) return pallete[8]\n}\n\n\nfunction setGenome(ggdot,xScale,sampleSummary, genomeSummary,sampleData) {\n\n  let svg_dot = select(ggdot.current)\n  svg_dot.selectAll(\"*\").remove()\n\n  let sampleName = sampleData.key\n  let sampleValues = sampleData.values\n\n  sampleValues.forEach(function(d,i){\n\n  let pointsA = d.values.map(function (d) {return [d.covA,d.pos]})\n  let pointsB = d.values.map(function (d) {return [-1*d.covB,d.pos]})\n  let mean = sampleSummary[sampleName].mean\n\n\n  let chrPosX = xScale(genomeSummary[d.key].offset)+100\n\n  //console.log(pointsB)\n  let x = scaleLinear()\n    .domain([-3*mean, 3*mean])\n    .range([ -60, 60 ]);\n\n  svg_dot.append(\"g\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(axisLeft(x));\n\n  // Add Y axis\n  let y = scaleLinear()\n    .domain([0, 60000000])\n    .range([ 0,height]);\n  svg_dot.append(\"g\")\n  .call(axisLeft(y));\n\n\n  svg_dot.append('g')\n    .attr(\"transform\", `translate(50,0)`)\n    .selectAll(\"dot\")\n    .data(pointsA)\n    .enter()\n    .append(\"circle\")\n    .attr(\"cx\", xi => chrPosX+x(xi[0]))\n    .attr(\"cy\", yi => y(yi[1]))\n    .attr(\"r\", 1.5)\n    .style(\"fill\", d => {\n    if(d[0]>80) return '#69b3a2'\n    if(d[0]<10) return '#9933a2'\n    return '#808080'\n    })\n\n  svg_dot.append('g')\n    .attr(\"transform\", `translate(50,0)`)\n    .selectAll(\"dot\")\n    .data(pointsB)\n    .enter()\n    .append(\"circle\")\n    .attr(\"cx\", xi => chrPosX+x(xi[0]))\n    .attr(\"cy\", yi => y(yi[1]))\n    .attr(\"r\", 1.5)\n    .style(\"fill\", d => {\n      if(d[0]<-80) return '#9933a2'\n      if(d[0]>-10) return '#69b3a2'\n      return '#808080'\n    })\n\n  svg_dot.append(\"line\")\n    .attr(\"transform\", `translate(50,0)`)\n    .attr(\"x1\", chrPosX)\n    .attr(\"y1\", y(0))\n    .attr(\"x2\", chrPosX)\n    .attr(\"y2\", y(genomeSummary[d.key].chrSize))\n    .style(\"stroke\", \"black\")\n    .style(\"stroke-width\", 2)\n\n  svg_dot.append(\"line\")\n    .attr(\"transform\", `translate(50,0)`)\n    .attr(\"x1\", chrPosX+x(mean))\n    .attr(\"y1\", y(0))\n    .attr(\"x2\", chrPosX+x(mean))\n    .attr(\"y2\", y(genomeSummary[d.key].chrSize))\n    .style(\"stroke\", \"#9933a2\")\n    .style(\"stroke-width\", 2)\n\n  svg_dot.append(\"line\")\n    .attr(\"transform\", `translate(50,0)`)\n    .attr(\"x1\", chrPosX-x(mean))\n    .attr(\"y1\", y(0))\n    .attr(\"x2\", chrPosX-x(mean))\n    .attr(\"y2\", y(genomeSummary[d.key].chrSize))\n    .style(\"stroke\", \"#69b3a2\")\n    .style(\"stroke-width\", 2)\n\n\n\n  })\n\n\n}\n\n\nconst GenomeGroup = ({data}) => {\n    const gglinear = useRef(null)\n    const ggdot = useRef(null)\n    useEffect(() => {\n        if(data && gglinear.current) {\n\n            let genomeSummary = getGenomeSummary(data)\n            let sampleSummary = getSampleSummary(data)\n            console.log(genomeSummary)\n            console.log(sampleSummary)\n\n            const xScale = scaleLinear().domain([0, genomeSummary['map_size']]).range([0, width-margin.right])\n            const yScale = scaleLinear().domain([0, 300]).range([0, height])\n\n\n            let svg = select(gglinear.current)\n            // append group translated to chart area\n            svg = svg.append('g').attr('transform', `translate(${margin.left}, ${margin.top})`)\n            /* draw axis */\n            let x_axis = axisBottom().scale(xScale).ticks(5);\n            svg.append('g')\n              .attr('transform', `translate(50, ${height - margin.bottom})`)\n              .style('font', '16px helvetica')\n              .call(x_axis)\n\n\n            //group by sample then by chr\n            let mydat = nest()\n              .key(function(d) {return d.sample})\n              .key(function(d) {return d.group})\n              .entries(data)\n\n              mydat.forEach(function(sampleData,j){\n                let sampleName = sampleData.key\n                let sampleValues = sampleData.values\n                let chrPosY = yScale(`${margin.top+barWidth*j}`)\n\n                // sample label\n                svg\n                  .append(\"text\")\n                  .attr(\"class\", \"y label\")\n                  .attr(\"x\",xScale(0))\n                  .attr(\"y\",chrPosY+barWidth)\n                  .text(sampleName)\n\n                sampleValues.forEach(function(d,i){\n                  let datapoints = d.values.map(function (dp) {\n                    return [dp.pos,heColor(sampleSummary[sampleName].mean,sampleSummary[sampleName].sd,dp.covA,dp.covB)]\n                  })\n                  let chrPosX = xScale(genomeSummary[d.key].offset)\n\n                  /* draw frame */\n                  svg\n                   .append('g')\n                   .attr('transform', `translate(50,0)`)\n                   .append('rect')\n                   .attr('rx', 2)\n                   .attr('ry', 2)\n                   .attr('x', chrPosX)\n                   .attr('y', chrPosY)\n                   .attr('width', xScale(genomeSummary[d.key].chrSize))\n                   .attr('height', barWidth)\n                   .style('fill', '#FF2400AF')\n                   .style('fill-opacity',0.1)\n                   .on(\"click\", () => {setGenome(ggdot,xScale,sampleSummary,genomeSummary,sampleData)});\n\n                  /* draw data points */\n                  svg\n                  .append('g')\n                   .attr('transform', `translate(50,0)`)\n                  .selectAll('line')\n                  .data(datapoints)\n                  .enter()\n                  .append('line')\n                  .style('stroke', d => d[1])\n                  .attr('chrGroup', d.key)\n                  .attr('value',d => d[0])\n                  .attr('x1', xi => chrPosX + xScale(xi[0]))\n                  .attr('y1', yi => chrPosY )\n                  .attr('x2', xi => chrPosX + xScale(xi[0]))\n                  .attr('y2', yi => chrPosY + barWidth)\n                  .attr('stroke-width', 1)\n                })\n            })\n\n            svg\n            .append('g')\n            .attr('class', 'bar-header')\n            .attr('transform', `translate(0, ${margin.top})`)\n            .append('text')\n            .append('tspan')\n            .text('HE')        \n        }\n    },[data])\n\n\n    return (\n      <div>\n        <svg className='GGLinear' onClick={setSelectedChr}\n            width = {width + margin.left + margin.right} \n            height= {height + margin.top + margin.bottom}\n            ref={gglinear}></svg>        \n        \n        <svg className='GGDot' onClick={setSelectedChr}\n        width = {width + margin.left + margin.right} \n        height= {height + margin.top + margin.bottom}\n        ref={ggdot}></svg>\n      </div>\n    )\n}\n\nexport default GenomeGroup","import React, { useState, useEffect } from 'react'\nimport Loader from \"react-loader-spinner\";\nimport { csv, tsv } from 'd3-fetch'\nimport { ascending } from 'd3-array'\n\nimport GenomeGroup from './GenomeGroup'\n\nfunction heFormat(d) {\n  return {\n    sample: d.sample,\n    group: d.group,\n    pos: +d.pos,\n    geneA: d.geneA,\n    covA: parseFloat(d.covA),\n    geneB: d.geneB,\n    covB: parseFloat(d.covB)\n  }\n}\n\nconst GenomeLoad = () => {\n  const [genome, setGenomeData] = useState(null)\n\n  useEffect(() => {\n    csv('./data/bna_he.csv',heFormat).then(data => {\n      setGenomeData(data)\n    })\n  }, [])\n  \n\n  if (genome === null) {\n    // add a loader timeout in 10s\n    return <Loader type=\"Oval\" color=\"#00BFFF\" height={100} width={100} timeout={100000} />\n  }\n\n  return <GenomeGroup data={genome} />\n}\n\nexport default GenomeLoad","import React, { Component } from 'react'\nimport './App.css'\nimport GenomeLoad from './components/GenomeLoad'\n\nclass App extends Component {\n  render() {\n  return (\n     <div className='App'>\n     <div className='App-header'>\n     <h2>dashboard</h2>\n     </div>\n     <GenomeLoad />\n     </div>\n  )\n  }\n}\nexport default App\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}