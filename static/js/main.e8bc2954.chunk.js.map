{"version":3,"sources":["components/GenomeGroup.js","components/GenomeLoad.js","App.js","reportWebVitals.js","index.js"],"names":["margin","width","height","chrDistance","heColor","mean","sd","cov1","cov2","pallete","zscore1","zscore2","getSVGString","svgNode","setAttribute","svgString","XMLSerializer","serializeToString","replace","writeDownloadLink","filename","Blob","e","alert","blob","type","saveAs","GenomeGroup","_ref","data","gglinear","useRef","ggdot","_useState","useState","_useState2","Object","slicedToArray","dotplot","setDotPlot","_useState3","_useState5","_useState6","ggHeight","setGgHeight","useEffect","current","handleSampleChange","sampleData","j","sample","key","xScale","sampleSummary","genomeSummary","svg_dot","select","selectAll","remove","sampleName","values","forEach","d","i","pointsA","map","covA","pos","pointsB","covB","chrPosX","offset","x","scaleLinear","domain","range","y","yAxis","axisLeft","scale","ticks","tickFormat","append","attr","style","call","enter","xi","yi","chrSize","setGenome","sampleButtons","svg","filter","chrGroup","nest","group","entries","length","max","name","getGenomeSummary","sampleGroup","deviation","getSampleSummary","console","log","yScale","concat","heData","num_samples","_","hasOwnProperty","text","sampleValues","chrPosY","on","datapoints","dp","node","react_default","a","createElement","className","id","ref","heFormat","parseFloat","GenomeLoad","genome","setGenomeData","document","getElementById","addEventListener","evt","file","target","files","reader","FileReader","onload","csv","result","then","readAsDataURL","accept","components_GenomeGroup","App","components_GenomeLoad","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.e8bc2954.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\nimport { max, mean,deviation } from 'd3-array'\nimport { select } from 'd3-selection'\nimport { nest } from 'd3-collection'\nimport { scaleLinear } from 'd3-scale'\nimport { axisTop, axisLeft } from 'd3-axis'\nimport { saveAs } from 'file-saver';\nimport '../index.css'\nimport Loader from \"react-loader-spinner\";\nimport * as _ from \"lodash\";\n\nconst margin = { top: 20, right: 20, bottom: 50, left: 20 }\nconst width = 1600 - margin.left - margin.right\nconst height = 400 - margin.top - margin.bottom\nconst barDistance  = 100\nconst chrDistance = 5000000\nconst barWidth = 20\nconst xPosition = 80\nconst yPosition = 150\n\n\nfunction getGenomeSummary(d) {\n    // group data by chr\n    let chrGroup = nest()\n      .key(function(d) { return d.group })\n      .entries(d)\n\n    let i,offset = 0\n    let genomeSummary = {}\n\n    for(i = 0; i < chrGroup.length; i++) {\n      let chrSize = max(chrGroup[i].values.map(function (d) { return d.pos} ))\n      genomeSummary[chrGroup[i].key] = {\n        name: chrGroup[i].key,\n        chrSize: chrSize,\n        offset: offset\n      }\n      offset += chrSize + chrDistance\n    }\n    genomeSummary['map_size'] = offset\n    return genomeSummary\n  }\n\nfunction getSampleSummary(d) {\n    // group data by chr\n    let sampleGroup = nest()\n      .key(function(d) { return d.sample })\n      .entries(d)\n\n    let i, offset = 0\n    let sampleSummary = {}\n\n    for(i = 0; i < sampleGroup.length; i++) {\n      sampleSummary[sampleGroup[i].key] = {\n        name: sampleGroup[i].key,\n        mean: mean(sampleGroup[i].values.map(function (d) { return (d.covA + d.covB)} )) / 2,\n        sd: deviation(sampleGroup[i].values.map(function (d) { return d.covA}))/2\n      }\n    }\n    return sampleSummary\n  }\n\n\nfunction heColor(mean,sd,cov1,cov2) {\n  const pallete = [\n  '#FF2400', '#E56717', '#FDD017',\n  '#5FFB17','#4EE2EC','#0041C2',\n  '#E3319D','#9C67CA', '#452E5A']\n\n  //const pallete = [\n  //  '#73D055FF','#B8DE29FF','#FDE725FF',\n  //  '#39568CFF',null,'#238A8DFF',\n  //  '#440154FF','#482677FF','#404788FF']\n\n  let zscore1 = (cov1 - mean) / sd\n  let zscore2 = (cov2 -mean) / sd\n  /* del/del */\n  if (zscore1<=-2 && zscore2<=-2) return pallete[0]\n  /* del/norml */\n  if (zscore1<-2 && (zscore2>-2 && zscore2<2)) return pallete[1]\n  /* del/dup */\n  if (zscore1<=-2 && zscore2>=2) return pallete[2]\n  /* norml/del */\n  if ((zscore1>-2 && zscore1<2) && zscore2<-2) return pallete[3]\n  /* norml/norml */\n  if ((zscore1>-2 && zscore1<2) && (zscore2>-2 && zscore2<2)) return pallete[4]\n  /* norml/dup */\n  if ((zscore1>-2 && zscore1<2) && zscore2>2) return pallete[5]\n  /* del/dup */\n  if (zscore1<=-2 && zscore2>=2) return pallete[6]\n  /* del/norml */\n  if (zscore1<-2 && (zscore2>-2 && zscore2<2)) return pallete[7]\n  /* dup/dup */\n  if (zscore1>2 && zscore2>2) return pallete[8]\n}\n\nfunction getSVGString( svgNode ) {\n\tsvgNode.setAttribute('xlink', 'http://www.w3.org/1999/xlink');\n\tvar serializer = new XMLSerializer();\n\tvar svgString = serializer.serializeToString(svgNode);\n\tsvgString = svgString.replace(/(\\w+)?:?xlink=/g, 'xmlns:xlink='); // Fix root xlink without namespace\n\tsvgString = svgString.replace(/NS\\d+:href/g, 'xlink:href'); // Safari NS namespace fix\n\n\treturn svgString;\n}\n\n\nfunction svgString2Image( svgString, width, height, format, callback ) {\n\tvar format = format ? format : 'png';\n\n\tvar imgsrc = 'data:image/svg+xml;base64,'+ btoa( unescape( encodeURIComponent( svgString ) ) ); // Convert SVG string to data URL\n\n\tvar canvas = document.createElement(\"canvas\");\n\tvar context = canvas.getContext(\"2d\");\n\n\tcanvas.width = width;\n\tcanvas.height = height;\n\n\tvar image = new Image();\n\timage.onload = function() {\n\t\tcontext.clearRect ( 0, 0, width, height );\n\t\tcontext.drawImage(image, 0, 0, width, height);\n\n\t\tcanvas.toBlob( function(blob) {\n\t\t\tvar filesize = Math.round( blob.length/1024 ) + ' KB';\n\t\t\tif ( callback ) callback( blob, filesize );\n\t\t});\n\n\n\t};\n\n\timage.src = imgsrc;\n}\n\nfunction writeDownloadLink(svgString, filename){\n    try {\n        var isFileSaverSupported = !!new Blob();\n    } catch (e) {\n        alert(\"blob not supported\");\n    }\n    var blob = new Blob([svgString], {type: \"image/svg+xml\"});\n    saveAs(blob, filename);\n};\n\n\nfunction setGenome(ggdot,xScale,sampleSummary, genomeSummary,sampleData) {\n\n  let svg_dot = select(ggdot.current)\n  svg_dot.selectAll(\"*\").remove()\n\n  let sampleName = sampleData.key\n  let sampleValues = sampleData.values\n\n  sampleValues.forEach(function(d,i){\n\n    let pointsA = d.values.map(function (d) {return [d.covA,d.pos]})\n    let pointsB = d.values.map(function (d) {return [-1*d.covB,d.pos]})\n    let mean = sampleSummary[sampleName].mean\n    let chrPosX = xScale(genomeSummary[d.key].offset)+100\n\n\n  //console.log(pointsB)\n    let x = scaleLinear()\n      .domain([-3*mean, 3*mean])\n      .range([ -60, 60 ])\n\n  // Add Y axis\n  let y = scaleLinear()\n    .domain([0, 70000000])\n    .range([ 0,height])\n  let yAxis = axisLeft().scale(y).ticks(6).tickFormat(function(d,i) {  return d/1000000 })\n  svg_dot.append(\"g\")\n      .attr(\"transform\", `translate(50, 20)`)\n      .style('font', '12px helvetica')\n      .call(yAxis)\n\n  svg_dot.append('g')\n    .attr(\"transform\", `translate(50, 20)`)\n    .selectAll(\"dot\")\n    .data(pointsA)\n    .enter().append(\"circle\")\n    .attr(\"cx\", xi => chrPosX+x(xi[0]))\n    .attr(\"cy\", yi => y(yi[1]))\n    .attr(\"r\", 1.5)\n    .style(\"fill\", d => {\n    if(d[0]>80) return '#69b3a2'\n    if(d[0]<10) return '#9933a2'\n    return '#808080'\n    })\n\n  svg_dot.append('g')\n    .attr(\"transform\", `translate(50, 20)`)\n    .selectAll(\"dot\")\n    .data(pointsB)\n    .enter().append(\"circle\")\n    .attr(\"cx\", xi => chrPosX+x(xi[0]))\n    .attr(\"cy\", yi => y(yi[1]))\n    .attr(\"r\", 1.5)\n    .style(\"fill\", d => {\n      if(d[0]<-80) return '#9933a2'\n      if(d[0]>-10) return '#69b3a2'\n      return '#808080'\n    })\n\n  svg_dot.append(\"line\")\n    .attr(\"transform\", `translate(50, 20)`)\n    .attr(\"x1\", chrPosX)\n    .attr(\"y1\", y(0))\n    .attr(\"x2\", chrPosX)\n    .attr(\"y2\", y(genomeSummary[d.key].chrSize))\n    .style(\"stroke\", \"black\")\n    .style(\"stroke-width\", 2)\n\n  svg_dot.append(\"line\")\n    .attr(\"transform\", `translate(50, 20)`)\n    .attr(\"x1\", chrPosX+x(mean))\n    .attr(\"y1\", y(0))\n    .attr(\"x2\", chrPosX+x(mean))\n    .attr(\"y2\", y(genomeSummary[d.key].chrSize))\n    .style(\"stroke\", \"#9933a2\")\n    .style(\"stroke-width\", 2)\n\n  svg_dot.append(\"line\")\n    .attr(\"transform\", `translate(50, 20)`)\n    .attr(\"x1\", chrPosX-x(mean))\n    .attr(\"y1\", y(0))\n    .attr(\"x2\", chrPosX-x(mean))\n    .attr(\"y2\", y(genomeSummary[d.key].chrSize))\n    .style(\"stroke\", \"#69b3a2\")\n    .style(\"stroke-width\", 2)\n  })\n}\n\n\nconst GenomeGroup = ({data}) => {\n    const gglinear = useRef(null)\n    const ggdot = useRef(null)\n    const [dotplot, setDotPlot] = useState(null)\n    const [, setSelectedSample] = useState(null)\n    const [ggHeight, setGgHeight] = useState('400')\n\n    useEffect(() => {\n\n        if(data && gglinear.current) {\n\n            const genomeSummary = getGenomeSummary(data)\n            const sampleSummary = getSampleSummary(data)\n            console.log(genomeSummary)\n            console.log(sampleSummary)\n\n\n            function handleSampleChange(sampleData,j) {\n                let sample = sampleData.key\n                // update sample label\n                setDotPlot(sample)\n                // update plot area\n                setGenome(ggdot, xScale, sampleSummary, genomeSummary, sampleData)\n\n                var sampleButtons = svg.selectAll(\".sampleBtn\")\n                //unset old\n                sampleButtons.style(\"fill\",\"#525252\")\n                //set new selected\n                sampleButtons.filter(function (d, i) { return i === j;})\n                .style(\"fill\",\"blue\")\n            }\n\n\n            const xScale = scaleLinear().domain([0, genomeSummary['map_size']]).range([0, width-margin.right])\n            const yScale = scaleLinear().domain([0, 300]).range([0, height])\n\n\n            let svg = select(gglinear.current)\n            // append group translated to chart area\n            svg = svg.append('g').attr('transform', `translate(${margin.left}, ${margin.top})`)\n\n            //group by sample then by chr\n            const heData = nest()\n              .key(function(d) {return d.sample})\n              .key(function(d) {return d.group})\n              .entries(data)\n\n            //set image height based on number of samples\n            let num_samples = _.size(heData)\n            setGgHeight(22 * (num_samples + 1))\n\n\n            //let defaultX = xScale(genomeSummary[defaultData.key].offset)\n            /* draw chr labels */\n            for (let chrGroup in genomeSummary) {\n              if (genomeSummary[chrGroup].hasOwnProperty('offset')) {\n                svg\n                  .attr('transform', `translate(50,0)`)\n                  .append(\"text\")\n                  .attr(\"class\", \"xLabel\")\n                  .attr(\"x\",xScale(genomeSummary[chrGroup].offset)+100)\n                  .attr(\"y\",20)\n                  .attr(\"text-anchor\", \"middle\")\n                  .text(chrGroup)\n                  .style('font', '16px helvetica')\n              }\n            }\n\n            /* draw sample labels */\n            heData.forEach(function(sampleData,j){\n              let sampleName = sampleData.key\n              let sampleValues = sampleData.values\n              let chrPosY = yScale(`${margin.top+barWidth*j}`)\n\n              // sample label\n              svg\n                .append('g')\n                .append('rect')\n                .attr(\"class\",\"sampleBtn\")\n                .attr('rx', 4)\n                .attr('ry', 4)\n                .attr('x', xScale(0))\n                .attr('y', chrPosY)\n                .attr('width', 40)\n                .attr('height', barWidth)\n\n              svg\n                .append(\"text\")\n                .attr(\"class\", \"y label\")\n                .attr(\"x\",20)\n                .attr(\"y\",chrPosY+yScale(barWidth)-4)\n                .attr(\"text-anchor\", \"middle\")\n                .text(sampleName)\n                .style('font', '14px helvetica')\n                .style('fill', 'white')\n                .on(\"click\", () => {\n                    handleSampleChange(sampleData,j)\n                })\n\n            /* draw heatmap */\n                sampleValues.forEach(function(d,i){\n                  let datapoints = d.values.map(function (dp) {\n                    return [dp.pos,heColor(sampleSummary[sampleName].mean,sampleSummary[sampleName].sd,dp.covA,dp.covB)]\n                  })\n                  let chrPosX = xScale(genomeSummary[d.key].offset)\n\n                  /* draw frame */\n                  svg\n                   .append('g')\n                   .attr('transform', `translate(50,0)`)\n                   .append('rect')\n                   .attr('rx', 2)\n                   .attr('ry', 2)\n                   .attr('x', chrPosX)\n                   .attr('y', chrPosY)\n                   .attr('width', xScale(genomeSummary[d.key].chrSize))\n                   .attr('height', barWidth)\n                   .style('fill', '#FF2400AF')\n                   .style('fill-opacity',0.1)\n\n                  /* draw data points */\n                  svg\n                  .append('g')\n                   .attr('transform', `translate(50,0)`)\n                  .selectAll('line')\n                  .data(datapoints)\n                  .enter()\n                  .append('line')\n                  .attr(\"class\",d.key)\n                  .style('stroke', d => d[1])\n                  .attr('chrGroup', d.key)\n                  .attr('value',d => d[0])\n                  .attr('x1', xi => chrPosX + xScale(xi[0]))\n                  .attr('y1', yi => chrPosY )\n                  .attr('x2', xi => chrPosX + xScale(xi[0]))\n                  .attr('y2', yi => chrPosY + barWidth)\n                })\n            })\n\n            //set default sample\n            handleSampleChange(heData[0],0)\n\n            select('#saveHeatMap').on('click', function(){\n\t            var svgString = '<svg height=\"500\" width=\"1000\">'+getSVGString(svg.node())+'</svg>';\n                writeDownloadLink(svgString, 'heatmap.svg')\n\t        })\n            select('#saveScatter').on('click', function(){\n                let svg_dot = select(ggdot.current)\n\t            var svgString = '<svg height=\"500\" width=\"1000\">'+getSVGString(svg_dot.node())+'</svg>';\n                writeDownloadLink(svgString, 'scatterplot.svg')\n\t        })\n\n\n\n            //select('#saveButton').on('click', function(){\n\t            //var svgString = '<svg height=\"500\" width=\"1000\">'+getSVGString(svg.node())+'</svg>';\n\t            //var svgString = '<svg height=\"500\" width=\"1000\">'+svg.node().parentNode.innerHTML+'</svg>'\n\t            //var svgString = '<svg height=\"100\" width=\"100\"><circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"red\" /></svg>'\n                //writeDownloadLink(svgString)\n\n\n\t            //svgString2Image( svgString, 2*width, 2*height, 'png', save ); // passes Blob and filesize String to the callback\n\t            //function save( dataBlob, filesize ){\n\t\t        //    saveAs( dataBlob, 'D3 vis exported to PNG.png' ); // FileSaver.js function\n                //    console.log(svgString)\n                //    alert(\"here\")\n\n\t            //}\n\t        //})\n        }\n    },[data])\n\n    return (\n      <div>\n        <div className = 'actionPanel'>\n            <button className='saveBtn' id='saveHeatMap'>Export Heatmap</button>\n            <button className='saveBtn' id='saveScatter'>Export ScatterPlot</button>\n        </div>\n        <div className='ggContainer'>\n        <svg className='GGLinear'\n            width = {width + margin.left + margin.right} \n            height= {ggHeight}\n            ref={gglinear}></svg>\n        </div>\n        <h3>{dotplot}</h3>\n        <div className='ggContainer'>\n        <svg className='GGDot'\n        width = {width + margin.left + margin.right} \n        height='400' ref={ggdot}></svg>\n        </div>\n      </div>\n    )\n}\n\n\nexport default GenomeGroup","import React, { useState, useEffect } from 'react'\nimport Loader from \"react-loader-spinner\";\nimport { csv, tsv } from 'd3-fetch'\nimport { ascending } from 'd3-array'\n\nimport GenomeGroup from './GenomeGroup'\n//import FileLoader from './FileLoader'\n\nfunction heFormat(d) {\n  return {\n    sample: d.sample,\n    group: d.group,\n    pos: +d.pos,\n    covA: parseFloat(d.covA),\n    covB: parseFloat(d.covB)\n  }\n}\n\nconst GenomeLoad = () => {\n  const [genome, setGenomeData] = useState(null)\n\n  useEffect(() => {\n    function handleFileSelect(evt) {\n      var file = evt.target.files[0];\n      var reader = new FileReader();\n      reader.onload = (function(theFile) {\n      return function(e) {\n        csv(e.target.result,heFormat).then(data => {\n          setGenomeData(data)\n        })\n      };\n    })(file);\n    reader.readAsDataURL(file);\n}\ndocument.getElementById('file_input').addEventListener('change', handleFileSelect, false);\n\n\n  }, [])\n\n\n  //if (genome === null) {\n    // add a loader timeout in 10s\n  //  return <h3>Loading data..</h3>\n  //}\n\n  return (\n  <div>\n  <input type=\"file\" id=\"file_input\" accept=\".csv\"\n  />\n\n  <GenomeGroup data={genome} />\n  </div>\n  )\n}\n\nexport default GenomeLoad","import React, { Component }  from 'react';\nimport './index.css'\nimport GenomeLoad from './components/GenomeLoad'\n\nconst App = () => {\n  return (\n    <div>\n       <div className='header'>\n         heviewer\n       </div>\n       <div className='heContainer'>\n         <GenomeLoad />\n       </div>\n    </div>\n  )\n}\nexport default App\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}