{"version":3,"sources":["components/GenomeGroup.js","components/GenomeLoad.js","App.js","reportWebVitals.js","index.js"],"names":["margin","width","height","chrDistance","barWidth","heColor","mean","sd","cov1","cov2","pallete","zscore1","zscore2","getSVGString","svgNode","setAttribute","svgString","XMLSerializer","serializeToString","replace","writeDownloadLink","filename","Blob","e","alert","blob","type","saveAs","drawChrLabels","chrLabels","genomeSummary","drawWidth","xScale","scaleLinear","domain","range","lastChrGroup","chrGroup","hasOwnProperty","offset","labelPos","attr","append","text","style","chrSize","console","log","GenomeGroup","_ref2","data","gglinear","useRef","ggdot","_useState","useState","_useState2","Object","slicedToArray","dotplot","setDotPlot","_useState3","_useState5","_useState6","ggHeight","setGgHeight","useEffect","current","handleSampleChange","sampleData","j","sample","key","sampleSummary","svg_dot","select","selectAll","remove","sampleName","values","forEach","d","i","pointsA","map","covA","pos","pointsB","covB","chrPosX","x","y","yAxis","axisLeft","scale","ticks","tickFormat","call","enter","xi","yi","setGenome","sampleButtons","svg","filter","nest","group","entries","length","max","name","getGenomeSummary","sampleGroup","deviation","getSampleSummary","yScale","concat","heData","num_samples","_","heatMaps","zooms","zoom","scaleExtent","on","_ref3","transform","isZoomed","event","zoomTransform","node","xPos","pointer","transformation","transition","duration","zoomIdentity","sampleValues","chrPosY","heatMap","datapoints","dp","drawHeatmap","react_default","a","createElement","className","id","ref","heFormat","parseFloat","GenomeLoad","genome","setGenomeData","document","getElementById","addEventListener","evt","file","target","files","reader","FileReader","onload","csv","result","then","readAsDataURL","accept","components_GenomeGroup","App","components_GenomeLoad","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.e029a8a6.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\nimport { max, mean,deviation } from 'd3-array'\nimport { select } from 'd3-selection'\nimport { nest } from 'd3-collection'\nimport { scaleLinear } from 'd3-scale'\nimport { axisTop, axisLeft } from 'd3-axis'\nimport { zoom, zoomIdentity, zoomTransform, invert } from 'd3-zoom'\nimport { pointer,event as currentevent } from 'd3'\n\nimport { saveAs } from 'file-saver';\nimport '../index.css'\nimport Loader from \"react-loader-spinner\";\nimport * as _ from \"lodash\";\n\nconst margin = { top: 20, right: 20, bottom: 50, left: 20 }\nconst width = 1500 - margin.left - margin.right\nconst height = 400 - margin.top - margin.bottom\nconst barDistance  = 100\nconst chrDistance = 5000000\nconst barWidth = 20\nconst xPosition = 80\nconst yPosition = 150\n\n\nfunction getGenomeSummary(d) {\n    // group data by chr\n    let chrGroup = nest()\n      .key(function(d) { return d.group })\n      .entries(d)\n\n    let i,offset = 0\n    let genomeSummary = {}\n\n    for(i = 0; i < chrGroup.length; i++) {\n      let chrSize = max(chrGroup[i].values.map(function (d) { return d.pos} ))\n      genomeSummary[chrGroup[i].key] = {\n        name: chrGroup[i].key,\n        chrSize: chrSize,\n        offset: offset\n      }\n      offset += chrSize + chrDistance\n    }\n    genomeSummary['map_size'] = offset\n    return genomeSummary\n  }\n\nfunction getSampleSummary(d) {\n    // group data by chr\n    let sampleGroup = nest()\n      .key(function(d) { return d.sample })\n      .entries(d)\n\n    let i, offset = 0\n    let sampleSummary = {}\n\n    for(i = 0; i < sampleGroup.length; i++) {\n      sampleSummary[sampleGroup[i].key] = {\n        name: sampleGroup[i].key,\n        mean: mean(sampleGroup[i].values.map(function (d) { return (d.covA + d.covB)} )) / 2,\n        sd: deviation(sampleGroup[i].values.map(function (d) { return d.covA}))/2\n      }\n    }\n    return sampleSummary\n  }\n\n\nfunction heColor(mean,sd,cov1,cov2) {\n  const pallete = [\n  '#FF2400', '#E56717', '#FDD017',\n  '#5FFB17','#4EE2EC','#0041C2',\n  '#E3319D','#9C67CA', '#452E5A']\n\n  //const pallete = [\n  //  '#73D055FF','#B8DE29FF','#FDE725FF',\n  //  '#39568CFF',null,'#238A8DFF',\n  //  '#440154FF','#482677FF','#404788FF']\n\n  let zscore1 = (cov1 - mean) / sd\n  let zscore2 = (cov2 -mean) / sd\n  /* del/del */\n  if (zscore1<=-2 && zscore2<=-2) return pallete[0]\n  /* del/norml */\n  if (zscore1<-2 && (zscore2>-2 && zscore2<2)) return pallete[1]\n  /* del/dup */\n  if (zscore1<=-2 && zscore2>=2) return pallete[2]\n  /* norml/del */\n  if ((zscore1>-2 && zscore1<2) && zscore2<-2) return pallete[3]\n  /* norml/norml */\n  if ((zscore1>-2 && zscore1<2) && (zscore2>-2 && zscore2<2)) return pallete[4]\n  /* norml/dup */\n  if ((zscore1>-2 && zscore1<2) && zscore2>2) return pallete[5]\n  /* del/dup */\n  if (zscore1<=-2 && zscore2>=2) return pallete[6]\n  /* del/norml */\n  if (zscore1<-2 && (zscore2>-2 && zscore2<2)) return pallete[7]\n  /* dup/dup */\n  if (zscore1>2 && zscore2>2) return pallete[8]\n}\n\nfunction getSVGString( svgNode ) {\n\tsvgNode.setAttribute('xlink', 'http://www.w3.org/1999/xlink');\n\tvar serializer = new XMLSerializer();\n\tvar svgString = serializer.serializeToString(svgNode);\n\tsvgString = svgString.replace(/(\\w+)?:?xlink=/g, 'xmlns:xlink='); // Fix root xlink without namespace\n\tsvgString = svgString.replace(/NS\\d+:href/g, 'xlink:href'); // Safari NS namespace fix\n\n\treturn svgString;\n}\n\n\nfunction svgString2Image( svgString, width, height, format, callback ) {\n\tvar format = format ? format : 'png';\n\n\tvar imgsrc = 'data:image/svg+xml;base64,'+ btoa( unescape( encodeURIComponent( svgString ) ) ); // Convert SVG string to data URL\n\n\tvar canvas = document.createElement(\"canvas\");\n\tvar context = canvas.getContext(\"2d\");\n\n\tcanvas.width = width;\n\tcanvas.height = height;\n\n\tvar image = new Image();\n\timage.onload = function() {\n\t\tcontext.clearRect ( 0, 0, width, height );\n\t\tcontext.drawImage(image, 0, 0, width, height);\n\n\t\tcanvas.toBlob( function(blob) {\n\t\t\tvar filesize = Math.round( blob.length/1024 ) + ' KB';\n\t\t\tif ( callback ) callback( blob, filesize );\n\t\t});\n\n\n\t};\n\n\timage.src = imgsrc;\n}\n\nfunction writeDownloadLink(svgString, filename){\n    try {\n        var isFileSaverSupported = !!new Blob();\n    } catch (e) {\n        alert(\"blob not supported\");\n    }\n    var blob = new Blob([svgString], {type: \"image/svg+xml\"});\n    saveAs(blob, filename);\n};\n\n\nfunction setGenome(ggdot,xScale,sampleSummary, genomeSummary,sampleData) {\n\n  let svg_dot = select(ggdot.current)\n  svg_dot.selectAll(\"*\").remove()\n\n  let sampleName = sampleData.key\n  let sampleValues = sampleData.values\n\n  sampleValues.forEach(function(d,i){\n\n    let pointsA = d.values.map(function (d) {return [d.covA,d.pos]})\n    let pointsB = d.values.map(function (d) {return [-1*d.covB,d.pos]})\n    let mean = sampleSummary[sampleName].mean\n    let chrPosX = xScale(genomeSummary[d.key].offset)+100\n\n\n  //console.log(pointsB)\n    let x = scaleLinear()\n      .domain([-3*mean, 3*mean])\n      .range([ -40, 40 ])\n\n  // Add Y axis\n  let y = scaleLinear()\n    .domain([0, 70000000])\n    .range([ 0,height])\n  let yAxis = axisLeft().scale(y).ticks(6).tickFormat(function(d,i) {  return d/1000000 })\n  svg_dot.append(\"g\")\n      .attr(\"transform\", `translate(50, 20)`)\n      .style('font', '12px helvetica')\n      .call(yAxis)\n\n  svg_dot.append('g')\n    .attr(\"transform\", `translate(50, 20)`)\n    .selectAll(\"dot\")\n    .data(pointsA)\n    .enter().append(\"circle\")\n    .attr(\"cx\", xi => chrPosX+x(xi[0]))\n    .attr(\"cy\", yi => y(yi[1]))\n    .attr(\"r\", 1.5)\n    .style(\"fill\", '#808080')\n\n  svg_dot.append('g')\n    .attr(\"transform\", `translate(50, 20)`)\n    .selectAll(\"dot\")\n    .data(pointsB)\n    .enter().append(\"circle\")\n    .attr(\"cx\", xi => chrPosX+x(xi[0]))\n    .attr(\"cy\", yi => y(yi[1]))\n    .attr(\"r\", 1.5)\n    .style(\"fill\", '#808080')\n\n  svg_dot.append(\"line\")\n    .attr(\"transform\", `translate(50, 20)`)\n    .attr(\"x1\", chrPosX)\n    .attr(\"y1\", y(0))\n    .attr(\"x2\", chrPosX)\n    .attr(\"y2\", y(genomeSummary[d.key].chrSize))\n    .style(\"stroke\", \"black\")\n    .style(\"stroke-width\", 2)\n\n  svg_dot.append(\"line\")\n    .attr(\"transform\", `translate(50, 20)`)\n    .attr(\"x1\", chrPosX+x(mean))\n    .attr(\"y1\", y(0))\n    .attr(\"x2\", chrPosX+x(mean))\n    .attr(\"y2\", y(genomeSummary[d.key].chrSize))\n    .style(\"stroke\", \"#9933a2\")\n    .style(\"stroke-width\", 2)\n\n  svg_dot.append(\"line\")\n    .attr(\"transform\", `translate(50, 20)`)\n    .attr(\"x1\", chrPosX-x(mean))\n    .attr(\"y1\", y(0))\n    .attr(\"x2\", chrPosX-x(mean))\n    .attr(\"y2\", y(genomeSummary[d.key].chrSize))\n    .style(\"stroke\", \"#69b3a2\")\n    .style(\"stroke-width\", 2)\n  })\n}\n\nfunction drawHeatmap(svg, sampleName, sampleValues, sampleSummary, genomeSummary, xScale, chrPosY) {\n\n  //const zooms = zoom()\n  //  .scaleExtent([1, 40])\n  //  .on(\"zoom\", zoomed);\n  //const zooms = zoom().on(\"zoom\", function () {\n  //     //heatMap.attr(\"transform\", `translate(${80-5*chrPosX},0) scale(5,1)`)\n  //     heatMap.attr(\"transform\", `translate(80,0) scale(5,1)`)\n  //  })\n\n  let heatMap = svg.append('g')\n  function zoomed({transform}) {\n    heatMap.attr(\"transform\", transform);\n  }\n\n\n  sampleValues.forEach(function(d,i){\n    let datapoints = d.values.map(function (dp) {\n      return [dp.pos,heColor(sampleSummary[sampleName].mean,sampleSummary[sampleName].sd,dp.covA,dp.covB)]\n    })\n  let chrPosX = xScale(genomeSummary[d.key].offset)\n\n\n  /* draw frame */\n  heatMap\n    .append('g')\n    .attr('transform', `translate(80,0)`)\n    .append('rect')\n    .attr('rx', 2)\n    .attr('ry', 2)\n    .attr('x', chrPosX)\n    .attr('y', chrPosY)\n    .attr('width', xScale(genomeSummary[d.key].chrSize))\n    .attr('height', barWidth)\n    .style('fill', '#FF2400AF')\n    .style('fill-opacity',0.1)\n\n  /* draw data points */\n  var groups = heatMap.append('g');\n  groups\n    .attr('transform', `translate(80,0)`)\n    .selectAll('line')\n    .data(datapoints)\n    .enter()\n    .append('line')\n    .attr(\"class\",d.key)\n    .style('stroke', d => d[1])\n    .attr('chrGroup', d.key)\n    .attr('value',d => d[0])\n    .attr('x1', xi => chrPosX + xScale(xi[0]))\n    .attr('y1', yi => chrPosY )\n    .attr('x2', xi => chrPosX + xScale(xi[0]))\n    .attr('y2', yi => chrPosY + barWidth)\n  })\n  //heatMap.on(\"click\",() => {zooms()})\n  //heatMap.call(zooms)\n}\n\n//possible solution\n//    .call(zoom().on(\"zoom\", function () {\n//       svg.attr(\"transform\", `translate(${80-5*chrPosX},0) scale(5,1)`)\n//    }))\n\n\n\n\n//function chrZoom(event, [x, y]) {\n//    event.stopPropagation();\n//    svg.transition().duration(750).call(\n//      zoom.transform,\n //     zoomIdentity.translate(width / 2, height / 2).scale(10).translate(-x, -y),\n//      pointer(event)\n//    );\n//  }\n\nfunction drawChrLabels(chrLabels, genomeSummary, drawWidth) {\n  let xScale = scaleLinear().domain([0, genomeSummary['map_size']]).range([0, drawWidth])\n  let lastPos = 0\n  let lastChrGroup = \"\"\n  for (let chrGroup in genomeSummary) {\n    if (genomeSummary[chrGroup].hasOwnProperty('offset')) {\n      if(genomeSummary[chrGroup].offset > 0) {\n        let labelPos = (genomeSummary[lastChrGroup].offset + genomeSummary[chrGroup].offset) / 2\n        chrLabels\n          .attr('transform', `translate(80,0)`)\n          .append(\"text\")\n          .attr(\"class\", \"xLabel\")\n          .attr(\"x\",xScale(labelPos))\n          .attr(\"y\",15)\n          .attr(\"text-anchor\", \"middle\")\n          .text(lastChrGroup)\n          .style('font', '16px helvetica')\n          .style('font-weight','bold')\n          .style('fill', 'rgb(0, 65, 194)')\n        lastChrGroup = chrGroup\n      }\n      else {\n        lastChrGroup=chrGroup\n      }\n    }\n  }\n  let labelPos = genomeSummary[lastChrGroup].offset + genomeSummary[lastChrGroup].chrSize / 2\n  console.log(lastChrGroup+labelPos)\n  chrLabels\n    .attr('transform', `translate(80,0)`)\n    .append(\"text\")\n    .attr(\"class\", \"xLabel\")\n    .attr(\"x\",xScale(labelPos))\n    .attr(\"y\",15)\n    .attr(\"text-anchor\", \"middle\")\n    .text(lastChrGroup)\n    .style('font', '16px helvetica')\n    .style('font-weight','bold')\n    .style('fill', 'rgb(0, 65, 194)')\n}\n\n\nconst GenomeGroup = ({data}) => {\n    const gglinear = useRef(null)\n    const ggdot = useRef(null)\n    const [dotplot, setDotPlot] = useState(null)\n    const [, setSelectedSample] = useState(null)\n    const [ggHeight, setGgHeight] = useState('400')\n\n    useEffect(() => {\n\n        if(data && gglinear.current) {\n\n            const genomeSummary = getGenomeSummary(data)\n            const sampleSummary = getSampleSummary(data)\n            console.log(genomeSummary)\n            console.log(sampleSummary)\n\n\n            function handleSampleChange(sampleData,j) {\n                let sample = sampleData.key\n                // update sample label\n                setDotPlot(sample)\n                // update plot area\n                setGenome(ggdot, xScale, sampleSummary, genomeSummary, sampleData)\n\n                var sampleButtons = svg.selectAll(\".sampleBtn\")\n                //unset old\n                sampleButtons.style(\"fill\",\"#525252\")\n                //set new selected\n                sampleButtons.filter(function (d, i) { return i === j;})\n                .style(\"fill\",\"blue\")\n            }\n\n\n            const xScale = scaleLinear().domain([0, genomeSummary['map_size']]).range([0, width-margin.right])\n            const yScale = scaleLinear().domain([0, 300]).range([0, height])\n\n\n            let svg = select(gglinear.current)\n            svg.selectAll(\"*\").remove()\n\n            // append group translated to chart area\n            svg = svg.append('g').attr('transform', `translate(${margin.left}, ${margin.top})`)\n\n            //group by sample then by chr\n            const heData = nest()\n              .key(function(d) {return d.sample})\n              .key(function(d) {return d.group})\n              .entries(data)\n\n            //set image height based on number of samples\n            let num_samples = _.size(heData)\n            setGgHeight(22 * (num_samples + 2))\n\n\n            //let defaultX = xScale(genomeSummary[defaultData.key].offset)\n            /* draw chr labels */\n            let chrLabels = svg.append('g')\n            drawChrLabels(chrLabels, genomeSummary, width-margin.right)\n\n\n            let heatMaps = svg.append('g')\n            var zooms = zoom().scaleExtent([5, 5]).on(\"zoom\",zoomed)\n            var isZoomed = 0\n            heatMaps.on(\"dblclick\", function(event) {\n                var curTransform = zoomTransform(heatMaps.node())\n                var xPos = pointer(event)[0]\n                var xPosZoomed = 5*xPos\n                var lowerBound = -5*60\n                var upperBound = -5*1200\n                var transformation = \"\"\n                if(isZoomed == 0) {\n                if(xPos < 210 ) {   // left-boundary\n                    transformation = lowerBound\n                }\n                else if(xPos > 1280 ) {   // right-boundary\n                    transformation = upperBound\n                }\n                else { // otherwise\n                    transformation = width / 2 - xPosZoomed\n                }\n                heatMaps.transition().duration(750).attr(\"transform\",\"translate(\"+transformation+\",0) scale(5,1)\")\n                chrLabels.remove()\n                chrLabels = svg.append('g')\n                drawChrLabels(chrLabels, genomeSummary, 5*width)\n                chrLabels.transition().duration(750).attr(\"transform\",\"translate(\"+transformation+\",0)\")\n                isZoomed = 1\n                }\n                else {\n                heatMaps.transition().duration(750).call(zooms.transform,zoomIdentity)\n                chrLabels.remove()\n                chrLabels = svg.append('g')\n                drawChrLabels(chrLabels, genomeSummary, width)\n                isZoomed = 0\n                }\n            })\n            function zoomed({transform}) {\n              heatMaps.attr(\"transform\", transform);\n            }\n\n            heData.forEach(function(sampleData,j){\n              let sampleName = sampleData.key\n              let sampleValues = sampleData.values\n              let chrPosY = yScale(`${margin.top+barWidth*j}`)\n\n              // sample label\n              svg\n                .append('g')\n                .append('rect')\n                .attr(\"class\",\"sampleBtn\")\n                .attr('rx', 4)\n                .attr('ry', 4)\n                .attr('x', xScale(0))\n                .attr('y', chrPosY)\n                .attr('width', 70)\n                .attr('height', barWidth)\n\n              svg\n                .append(\"text\")\n                .attr(\"class\", \"y label\")\n                .attr(\"x\",5)\n                .attr(\"y\",chrPosY+yScale(barWidth)-8)\n                .text(sampleName)\n                .style('font', '10px helvetica')\n                .style('fill', 'white')\n                .on(\"click\", () => {\n                    handleSampleChange(sampleData,j)\n                })\n\n              /* draw heatmap for sample */\n              drawHeatmap(heatMaps, sampleName, sampleValues, sampleSummary, genomeSummary, xScale, chrPosY)\n            })\n\n            //set default sample\n            handleSampleChange(heData[0],0)\n\n            select('#saveHeatMap').on('click', function(){\n\t            var svgString = '<svg height=\"500\" width=\"1000\">'+getSVGString(svg.node())+'</svg>';\n                writeDownloadLink(svgString, 'heatmap.svg')\n\t        })\n            select('#saveScatter').on('click', function(){\n                let svg_dot = select(ggdot.current)\n\t            var svgString = '<svg height=\"500\" width=\"1000\">'+getSVGString(svg_dot.node())+'</svg>';\n                writeDownloadLink(svgString, 'scatterplot.svg')\n\t        })\n        }\n    },[data])\n\n    return (\n      <div>\n        <div className = 'actionPanel'>\n            <button className='saveBtn' id='saveHeatMap'>Export Heatmap</button>\n            <button className='saveBtn' id='saveScatter'>Export ScatterPlot</button>\n        </div>\n        <div className='ggContainer'>\n        <svg className='GGLinear'\n            width = {width + margin.left + margin.right} \n            height= {ggHeight}\n            ref={gglinear}></svg>\n        </div>\n        <h3>{dotplot}</h3>\n        <div className='ggContainer'>\n        <svg className='GGDot'\n        width = {width + margin.left + margin.right} \n        height='400' ref={ggdot}></svg>\n        </div>\n      </div>\n    )\n}\n\n\nexport default GenomeGroup","import React, { useState, useEffect } from 'react'\nimport Loader from \"react-loader-spinner\";\nimport { csv, tsv } from 'd3-fetch'\nimport { ascending } from 'd3-array'\n\nimport GenomeGroup from './GenomeGroup'\n//import FileLoader from './FileLoader'\n\nfunction heFormat(d) {\n  return {\n    sample: d.sample,\n    group: d.group,\n    pos: +d.pos,\n    covA: parseFloat(d.covA),\n    covB: parseFloat(d.covB)\n  }\n}\n\nconst GenomeLoad = () => {\n  const [genome, setGenomeData] = useState(null)\n\n  useEffect(() => {\n    function handleFileSelect(evt) {\n      var file = evt.target.files[0];\n      var reader = new FileReader();\n      reader.onload = (function(theFile) {\n      return function(e) {\n        csv(e.target.result,heFormat).then(data => {\n          setGenomeData(data)\n        })\n      };\n    })(file);\n    reader.readAsDataURL(file);\n}\ndocument.getElementById('file_input').addEventListener('change', handleFileSelect, false);\n\n\n  }, [])\n\n\n  //if (genome === null) {\n    // add a loader timeout in 10s\n  //  return <h3>Loading data..</h3>\n  //}\n\n  return (\n  <div>\n  <input type=\"file\" id=\"file_input\" accept=\".csv\"\n  />\n\n  <GenomeGroup data={genome} />\n  </div>\n  )\n}\n\nexport default GenomeLoad","import React, { Component }  from 'react';\nimport './index.css'\nimport GenomeLoad from './components/GenomeLoad'\n\nconst App = () => {\n  return (\n    <div>\n       <div className='header'>\n         HExviewer\n       </div>\n       <div className='heContainer'>\n         <GenomeLoad />\n       </div>\n    </div>\n  )\n}\nexport default App\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}