{"version":3,"sources":["components/GenomeGroup.js","components/GenomeLoad.js","App.js","reportWebVitals.js","index.js"],"names":["margin","width","height","chrDistance","setSelectedChr","heColor","mean","sd","cov1","cov2","pallete","zscore1","zscore2","setGenome","ggdot","xScale","sampleSummary","genomeSummary","sampleData","svg_dot","select","current","selectAll","remove","sampleName","key","values","forEach","d","i","pointsA","map","covA","pos","pointsB","covB","chrPosX","offset","x","scaleLinear","domain","range","append","attr","style","text","y","yAxis","axisLeft","scale","ticks","tickFormat","call","data","enter","xi","yi","chrSize","GenomeGroup","_ref","gglinear","useRef","useEffect","chrGroup","nest","group","entries","length","max","name","getGenomeSummary","sampleGroup","sample","deviation","getSampleSummary","console","log","yScale","svg","concat","x_axis","axisBottom","heData","j","sampleValues","chrPosY","on","datapoints","dp","react_default","a","createElement","className","ref","onClick","heFormat","geneA","parseFloat","geneB","GenomeLoad","_useState","useState","_useState2","Object","slicedToArray","genome","setGenomeData","csv","then","dist_default","type","color","timeout","components_GenomeGroup","App","components_GenomeLoad","Component","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.792609f0.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\nimport { max, mean,deviation } from 'd3-array'\nimport { select } from 'd3-selection'\nimport { nest } from 'd3-collection'\nimport { scaleLinear } from 'd3-scale'\nimport { axisBottom, axisLeft } from 'd3-axis'\n\n\n\nconst margin = { top: 20, right: 20, bottom: 50, left: 20 }\nconst width = 1600 - margin.left - margin.right\nconst height = 400 - margin.top - margin.bottom\nconst barDistance  = 100\nconst chrDistance = 5000000\nconst barWidth = 20\nconst xPosition = 80\nconst yPosition = 150\n\n\nfunction setSelectedChr() {\n}\n\nfunction getGenomeSummary(d) {\n    // group data by chr\n    let chrGroup = nest()\n      .key(function(d) { return d.group })\n      .entries(d)\n\n    let i,offset = 0\n    let genomeSummary = {}\n\n    for(i = 0; i < chrGroup.length; i++) {\n      let chrSize = max(chrGroup[i].values.map(function (d) { return d.pos} ))\n      genomeSummary[chrGroup[i].key] = {\n        name: chrGroup[i].key,\n        chrSize: chrSize,\n        offset: offset\n      }\n      offset += chrSize + chrDistance\n    }\n    genomeSummary['map_size'] = offset\n    return genomeSummary\n  }\n\nfunction getSampleSummary(d) {\n    // group data by chr\n    let sampleGroup = nest()\n      .key(function(d) { return d.sample })\n      .entries(d)\n\n    let i, offset = 0\n    let sampleSummary = {}\n\n    for(i = 0; i < sampleGroup.length; i++) {\n      sampleSummary[sampleGroup[i].key] = {\n        name: sampleGroup[i].key,\n        mean: mean(sampleGroup[i].values.map(function (d) { return (d.covA + d.covB)} )) / 2,\n        sd: deviation(sampleGroup[i].values.map(function (d) { return d.covA}))/2\n      }\n    }\n    return sampleSummary\n  }\n\n\nfunction heColor(mean,sd,cov1,cov2) {\n  const pallete = [\n  '#FF24009F', '#E567179F', '#FDD0179F',\n  '#5FFB179F','#4EE2EC9F','#0041C29F',\n  '#E3319D9F','#9C67CA9F', '#452E5A9F']\n  //const pallete = [\n  //  '#73D055FF','#B8DE29FF','#FDE725FF',\n  //  '#39568CFF',null,'#238A8DFF',\n  //  '#440154FF','#482677FF','#404788FF']\n\n  let zscore1 = (cov1 - mean) / sd\n  let zscore2 = (cov2 -mean) / sd\n  /* del/del */\n  if (zscore1<=-2 && zscore2<=-2) return pallete[0]\n  /* del/norml */\n  if (zscore1<-2 && (zscore2>-2 && zscore2<2)) return pallete[1]\n  /* del/dup */\n  if (zscore1<=-2 && zscore2>=2) return pallete[2]\n  /* norml/del */\n  if ((zscore1>-2 && zscore1<2) && zscore2<-2) return pallete[3]\n  /* norml/norml */\n  if ((zscore1>-2 && zscore1<2) && (zscore2>-2 && zscore2<2)) return pallete[4]\n  /* norml/dup */\n  if ((zscore1>-2 && zscore1<2) && zscore2>2) return pallete[5]\n  /* del/dup */\n  if (zscore1<=-2 && zscore2>=2) return pallete[6]\n  /* del/norml */\n  if (zscore1<-2 && (zscore2>-2 && zscore2<2)) return pallete[7]\n  /* dup/dup */\n  if (zscore1>2 && zscore2>2) return pallete[8]\n}\n\n\nfunction setGenome(ggdot,xScale,sampleSummary, genomeSummary,sampleData) {\n\n  let svg_dot = select(ggdot.current)\n  svg_dot.selectAll(\"*\").remove()\n\n  let sampleName = sampleData.key\n  let sampleValues = sampleData.values\n\n  sampleValues.forEach(function(d,i){\n\n    let pointsA = d.values.map(function (d) {return [d.covA,d.pos]})\n    let pointsB = d.values.map(function (d) {return [-1*d.covB,d.pos]})\n    let mean = sampleSummary[sampleName].mean\n    let chrPosX = xScale(genomeSummary[d.key].offset)+100\n\n\n  //console.log(pointsB)\n    let x = scaleLinear()\n      .domain([-3*mean, 3*mean])\n      .range([ -60, 60 ])\n\n    svg_dot\n      .append('g')\n      .attr('class', 'bar-header')\n      .attr('transform', `translate(0, 12)`)\n      .style('font', '14px helvetica')\n      .append('text')\n      .append('tspan')\n      .text(sampleName)\n\n  // Add Y axis\n  let y = scaleLinear()\n    .domain([0, 70000000])\n    .range([ 0,height])\n  let yAxis = axisLeft().scale(y).ticks(6).tickFormat(function(d,i) {  return d/1000000 })\n  svg_dot.append(\"g\")\n      .attr(\"transform\", `translate(50, 20)`)\n      .style('font', '12px helvetica')\n      .call(yAxis)\n\n  svg_dot.append('g')\n    .attr(\"transform\", `translate(50, 20)`)\n    .selectAll(\"dot\")\n    .data(pointsA)\n    .enter()\n    .append(\"circle\")\n    .attr(\"cx\", xi => chrPosX+x(xi[0]))\n    .attr(\"cy\", yi => y(yi[1]))\n    .attr(\"r\", 1.5)\n    .style(\"fill\", d => {\n    if(d[0]>80) return '#69b3a2'\n    if(d[0]<10) return '#9933a2'\n    return '#808080'\n    })\n\n  svg_dot.append('g')\n    .attr(\"transform\", `translate(50, 20)`)\n    .selectAll(\"dot\")\n    .data(pointsB)\n    .enter()\n    .append(\"circle\")\n    .attr(\"cx\", xi => chrPosX+x(xi[0]))\n    .attr(\"cy\", yi => y(yi[1]))\n    .attr(\"r\", 1.5)\n    .style(\"fill\", d => {\n      if(d[0]<-80) return '#9933a2'\n      if(d[0]>-10) return '#69b3a2'\n      return '#808080'\n    })\n\n  svg_dot.append(\"line\")\n    .attr(\"transform\", `translate(50, 20)`)\n    .attr(\"x1\", chrPosX)\n    .attr(\"y1\", y(0))\n    .attr(\"x2\", chrPosX)\n    .attr(\"y2\", y(genomeSummary[d.key].chrSize))\n    .style(\"stroke\", \"black\")\n    .style(\"stroke-width\", 2)\n\n  svg_dot.append(\"line\")\n    .attr(\"transform\", `translate(50, 20)`)\n    .attr(\"x1\", chrPosX+x(mean))\n    .attr(\"y1\", y(0))\n    .attr(\"x2\", chrPosX+x(mean))\n    .attr(\"y2\", y(genomeSummary[d.key].chrSize))\n    .style(\"stroke\", \"#9933a2\")\n    .style(\"stroke-width\", 2)\n\n  svg_dot.append(\"line\")\n    .attr(\"transform\", `translate(50, 20)`)\n    .attr(\"x1\", chrPosX-x(mean))\n    .attr(\"y1\", y(0))\n    .attr(\"x2\", chrPosX-x(mean))\n    .attr(\"y2\", y(genomeSummary[d.key].chrSize))\n    .style(\"stroke\", \"#69b3a2\")\n    .style(\"stroke-width\", 2)\n  })\n}\n\n\nconst GenomeGroup = ({data}) => {\n    const gglinear = useRef(null)\n    const ggdot = useRef(null)\n    useEffect(() => {\n        if(data && gglinear.current) {\n\n            const genomeSummary = getGenomeSummary(data)\n            const sampleSummary = getSampleSummary(data)\n            console.log(genomeSummary)\n            console.log(sampleSummary)\n\n            const xScale = scaleLinear().domain([0, genomeSummary['map_size']]).range([0, width-margin.right])\n            const yScale = scaleLinear().domain([0, 300]).range([0, height])\n\n\n            let svg = select(gglinear.current)\n            // append group translated to chart area\n            svg = svg.append('g').attr('transform', `translate(${margin.left}, ${margin.top})`)\n            /* draw axis */\n            let x_axis = axisBottom().scale(xScale).ticks(5);\n            svg.append('g')\n              .attr('transform', `translate(50, ${height - margin.bottom})`)\n              .style('font', '16px helvetica')\n              .call(x_axis)\n\n\n            //group by sample then by chr\n            const heData = nest()\n              .key(function(d) {return d.sample})\n              .key(function(d) {return d.group})\n              .entries(data)\n\n              heData.forEach(function(sampleData,j){\n                let sampleName = sampleData.key\n                let sampleValues = sampleData.values\n                let chrPosY = yScale(`${margin.top+barWidth*j}`)\n\n                // sample label\n                  svg\n                   .append('g')\n                   .append('rect')\n                   .attr('rx', 2)\n                   .attr('ry', 2)\n                   .attr('x', xScale(0))\n                   .attr('y', chrPosY)\n                   .attr('width', 40)\n                   .attr('height', barWidth)\n                   .style('fill', '#282c34')\n\n                 svg\n                  .append(\"text\")\n                  .attr(\"class\", \"y label\")\n                  .attr(\"x\",20)\n                  .attr(\"y\",chrPosY+yScale(barWidth)-3)\n                  .attr(\"text-anchor\", \"middle\")\n                  .text(sampleName)\n                  .style('font', '14px helvetica')\n                  .style('fill', 'white')\n                  .on(\"click\", () => {setGenome(ggdot,xScale,sampleSummary,genomeSummary,sampleData)})\n\n\n                sampleValues.forEach(function(d,i){\n                  let datapoints = d.values.map(function (dp) {\n                    return [dp.pos,heColor(sampleSummary[sampleName].mean,sampleSummary[sampleName].sd,dp.covA,dp.covB)]\n                  })\n                  let chrPosX = xScale(genomeSummary[d.key].offset)\n\n                  /* draw frame */\n                  svg\n                   .append('g')\n                   .attr('transform', `translate(50,0)`)\n                   .append('rect')\n                   .attr('rx', 2)\n                   .attr('ry', 2)\n                   .attr('x', chrPosX)\n                   .attr('y', chrPosY)\n                   .attr('width', xScale(genomeSummary[d.key].chrSize))\n                   .attr('height', barWidth)\n                   .style('fill', '#FF2400AF')\n                   .style('fill-opacity',0.1)\n\n                  /* draw data points */\n                  svg\n                  .append('g')\n                   .attr('transform', `translate(50,0)`)\n                  .selectAll('line')\n                  .data(datapoints)\n                  .enter()\n                  .append('line')\n                  .style('stroke', d => d[1])\n                  .attr('chrGroup', d.key)\n                  .attr('value',d => d[0])\n                  .attr('x1', xi => chrPosX + xScale(xi[0]))\n                  .attr('y1', yi => chrPosY )\n                  .attr('x2', xi => chrPosX + xScale(xi[0]))\n                  .attr('y2', yi => chrPosY + barWidth)\n                  .attr('stroke-width', 1)\n                })\n            })\n\n            svg\n            .append('g')\n            .attr('class', 'bar-header')\n            .attr('transform', `translate(0, ${margin.top})`)\n            .append('text')\n            .append('tspan')\n            .text('HE Events')\n            \n            //set default sample\n            setGenome(ggdot,xScale,sampleSummary, genomeSummary,heData[1])\n        }\n    },[data])\n\n\n    return (\n      <div>\n        <svg className='GGLinear'\n            width = {width + margin.left + margin.right} \n            height= {height + margin.top + margin.bottom}\n            ref={gglinear}></svg>\n        <svg className='GGDot' onClick={setSelectedChr}\n        width = {width + margin.left + margin.right} \n        height= {height + margin.top + margin.bottom}\n        ref={ggdot}></svg>\n      </div>\n    )\n}\n\nexport default GenomeGroup","import React, { useState, useEffect } from 'react'\nimport Loader from \"react-loader-spinner\";\nimport { csv, tsv } from 'd3-fetch'\nimport { ascending } from 'd3-array'\n\nimport GenomeGroup from './GenomeGroup'\n\nfunction heFormat(d) {\n  return {\n    sample: d.sample,\n    group: d.group,\n    pos: +d.pos,\n    geneA: d.geneA,\n    covA: parseFloat(d.covA),\n    geneB: d.geneB,\n    covB: parseFloat(d.covB)\n  }\n}\n\nconst GenomeLoad = () => {\n  const [genome, setGenomeData] = useState(null)\n\n  useEffect(() => {\n    csv('./data/bna_he.csv',heFormat).then(data => {\n      setGenomeData(data)\n    })\n  }, [])\n  \n\n  if (genome === null) {\n    // add a loader timeout in 10s\n    return <Loader type=\"Oval\" color=\"#00BFFF\" height={100} width={100} timeout={100000} />\n  }\n\n  return <GenomeGroup data={genome} />\n}\n\nexport default GenomeLoad","import React, { Component } from 'react'\nimport './App.css'\nimport GenomeLoad from './components/GenomeLoad'\n\nclass App extends Component {\n  render() {\n  return (\n     <div className='App'>\n     <div className='App-header'>\n     <h4>dashboard</h4>\n     </div>\n     <GenomeLoad />\n     </div>\n  )\n  }\n}\nexport default App\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}